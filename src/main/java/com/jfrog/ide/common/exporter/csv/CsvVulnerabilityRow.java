package com.jfrog.ide.common.exporter.csv;

import com.jfrog.ide.common.exporter.exportable.ExportableVulnerability;
import com.opencsv.bean.CsvBindAndSplitByName;
import com.opencsv.bean.CsvBindByName;
import lombok.Getter;
import lombok.Setter;
import org.jfrog.build.extractor.scan.Cve;
import org.jfrog.build.extractor.scan.DependencyTree;
import org.jfrog.build.extractor.scan.Issue;

import java.util.ArrayList;
import java.util.List;

import static com.jfrog.ide.common.exporter.csv.CsvExporter.*;
import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;

/**
 * @author yahavi
 **/
@Setter
@SuppressWarnings("unused")
public class CsvVulnerabilityRow extends ExportableVulnerability {
    CsvVulnerabilityRow(DependencyTree directDependency, Issue issue) {
        super(directDependency, issue);
    }

    @Getter
    @CsvBindByName(column = SEVERITY_COL)
    private String severity;

    @CsvBindByName(column = IMPACTED_DEPENDENCY_COL)
    private String impactedDependencyName;

    @CsvBindByName(column = IMPACTED_DEPENDENCY_VERSION_COL)
    private String impactedDependencyVersion;

    @CsvBindByName(column = TYPE_COL)
    private String type;

    @CsvBindAndSplitByName(column = FIXED_VERSION_COL, elementType = String.class, writeDelimiter = ";")
    private List<String> fixedVersions;

    @CsvBindAndSplitByName(column = DIRECT_DEPENDENCIES_COL, elementType = String.class, writeDelimiter = ";")
    private List<String> directDependencies;

    @CsvBindAndSplitByName(column = CVES_COL, elementType = String.class, writeDelimiter = ";")
    private List<String> cves;

    @CsvBindAndSplitByName(column = CVSS_V2_COL, elementType = String.class, writeDelimiter = ";")
    private List<String> cvssV2;

    @CsvBindAndSplitByName(column = CVSS_V3_COL, elementType = String.class, writeDelimiter = ";")
    private List<String> cvssV3;

    @CsvBindByName(column = ISSUE_ID_COL)
    private String issueId;

    @CsvBindByName(column = SUMMARY_COL)
    private String summary;

    @Override
    public void addDirectDependency(String directDependency) {
        directDependencies = defaultIfNull(directDependencies, new ArrayList<>());
        directDependencies.add(directDependency);
    }

    @Override
    public void setCves(List<Cve> cves) {
        this.cves = defaultIfNull(this.cves, new ArrayList<>());
        cvssV2 = defaultIfNull(cvssV2, new ArrayList<>());
        cvssV3 = defaultIfNull(cvssV3, new ArrayList<>());
        for (Cve cve : cves) {
            this.cves.add(cve.getCveId());
            cvssV2.add(cve.getCvssV1());
            cvssV3.add(cve.getCvssV2());
        }
    }
}
